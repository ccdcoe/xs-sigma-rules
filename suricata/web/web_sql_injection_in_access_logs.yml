author: Saw Win Naung, Nasreddine Bencherchali
category: webserver
date: 2020/02/22
description: Detects SQL Injection attempts via GET requests in access logs
detection:
  condition: select_method and keywords and not 1 of filter*
  filter:
    sc-status: 404
  keywords:
  - '=select '
  - =select%20
  - =select(
  - UNION SELECT
  - UNION%20SELECT
  - UNION ALL SELECT
  - UNION%20ALL%20SELECT
  - CONCAT(0x
  - 'order by '
  - order%20by%20
  - information_schema.tables
  - group_concat(
  - table_schema
  - select%28sleep%2810%29
  - '@@version'
  - '''1''=''1'
  - '%271%27%3D%271'
  - SELECTCHAR(
  - 'select * '
  - select%20*%20
  - or 1=1#
  - or%201=1#
  select_method:
    http.http_method: GET
falsepositives:
- Java scripts and CSS Files
- User searches in search boxes of the respective website
- Internal vulnerability scanners can cause some serious FPs when used, if you experience
  a lot of FPs due to this think of adding more filters such as "User Agent" strings
  and more response codes
fields:
- scr_ip
- http.hostname
- http.url
- http.status
id: 5513deaf-f49a-46c2-a6c8-3f111b5cb453
level: high
logsource:
  category: webserver
  product: suricata
  service: http
modified: 2022/07/25
product: suricata
references:
- https://www.acunetix.com/blog/articles/exploiting-sql-injection-example/
- https://www.acunetix.com/blog/articles/using-logs-to-investigate-a-web-application-attack/
- https://brightsec.com/blog/sql-injection-payloads/
- https://github.com/payloadbox/sql-injection-payload-list
service: http
status: test
title: SQL Injection Strings
